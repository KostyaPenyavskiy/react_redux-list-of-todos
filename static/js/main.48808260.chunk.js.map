{"version":3,"sources":["store/index.ts","helpers/api.ts","components/Buttons/Buttons.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["initialState","isLoading","todos","store","createStore","state","action","type","filter","todo","id","sort","a","b","user","Error","name","localeCompare","title","completed","message","composeWithDevTools","getAll","url","fetch","then","response","json","Buttons","initData","sortByName","sortByStatus","sortByTitle","disabled","onClick","TodoList","deleteTodo","className","map","key","checked","getAppData","todosFromServer","usersFromServer","find","userId","App","dispatch","useDispatch","useSelector","initTodos","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.48808260.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst INIT_TODOS = 'INIT_TODOS';\nconst SORT_BY_TITLE = 'SORT_BY_TITLE';\nconst SORT_BY_STATUS = 'SORT_BY_STATUS';\nconst SORT_BY_NAME = 'SORT_BY_NAME';\nconst DELETE_TODO = 'DELETE_TODO';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\nexport const initTodos = (todos: Todo[]) => ({ type: INIT_TODOS, todos, });\nexport const sortByTitle = () => ({ type: SORT_BY_TITLE, });\nexport const sortByStatus = () => ({ type: SORT_BY_STATUS, });\nexport const sortByName = () => ({ type: SORT_BY_NAME, });\nexport const deleteTodo = (id: number) => ({type: DELETE_TODO, id,})\n\n// Initial state\nexport type RootState = {\n  isLoading: boolean;\n  todos: Todo[];\n};\n\nconst initialState: RootState = {\n  isLoading: false,\n  todos: [],\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case DELETE_TODO: \n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.id), \n      };\n\n    case SORT_BY_NAME:\n      return {\n        ...state,\n        todos: [...state.todos].sort((a: Todo, b: Todo) => {\n          if (a.user === null || b.user === null) {\n            throw new Error('error');\n          }\n\n          return a.user.name.localeCompare(b.user.name)\n        }),\n      };\n\n    case SORT_BY_TITLE:\n      return {\n        ...state,\n        todos: [...state.todos].sort((a: Todo, b: Todo) => {\n          if (a.user === null || b.user === null) {\n            throw new Error('error');\n          }\n\n          return a.title.localeCompare(b.title)\n        }),\n      };\n\n    case SORT_BY_STATUS:\n      return {\n        ...state,\n        todos: [...state.todos].sort((a: Todo, b: Todo) => {\n          if (a.user === null || b.user === null) {\n            throw new Error('error');\n          }\n\n          return +a.completed - +b.completed;\n        }),\n      };\n\n    case INIT_TODOS:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n\n    case START_LOADING:\n      return { ...state, isLoading: true };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        isLoading: false,\n        message: action.message,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","const API_URL = \"https://mate-academy.github.io/react_dynamic-list-of-todos/api\";\n\nconst getAll = <T>(url: string): Promise<T[]> => {\n  return fetch(`${API_URL}${url}.json`)\n    .then(response => response.json());\n}\n\nexport const getTodos = () => getAll<Todo>('/todos');\nexport const getUsers = () => getAll<User>('/users');\n","import React from 'react';\n\ntype Props = {\n  isLoading: boolean;\n  initData: () => void;\n  sortByName: () => void;\n  sortByStatus: () => void;\n  sortByTitle: () => void;\n}\n\nexport const Buttons: React.FC<Props> = ({ isLoading, initData, sortByName, sortByStatus, sortByTitle }) => {\n\n  return (\n    <div>\n      <button\n        type=\"button\"\n        disabled={isLoading}\n        onClick={initData}\n      >\n        {isLoading ? 'Loading...' : 'Load data'}\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => sortByName()}\n      >\n        Sort By Name\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => sortByStatus()}\n      >\n        Sort By Status\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => sortByTitle()}\n      >\n        Sort By Title\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  deleteTodo: (id: number) => void;\n}\n\nexport const TodoList: React.FC<Props> = ({ todos, deleteTodo }) => {\n\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <li key={todo.id} className=\"todo-list__item\">\n          <button type=\"button\" onClick={() => deleteTodo(todo.id)}>X</button>\n          <p>{todo.title}</p>\n          <p>{todo.user?.name}</p>\n          <input type=\"checkbox\" checked={todo.completed}/>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './App.scss';\n\nimport { getTodos, getUsers } from './helpers/api';\nimport {\n  initTodos,\n  startLoading,\n  finishLoading,\n  sortByName,\n  sortByStatus,\n  sortByTitle,\n  deleteTodo,\n  RootState\n} from './store/index';\n\nimport { Buttons } from './components/Buttons/Buttons';\nimport { TodoList } from './components/TodoList/TodoList';\n\nexport const getAppData = async (): Promise<Todo[]> => {\n  const todosFromServer = await getTodos();\n  const usersFromServer = await getUsers();\n\n  return todosFromServer.map(todo => ({\n    ...todo,\n    user: usersFromServer.find(user => user.id === todo.userId) || null,\n  }));\n};\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector((state: RootState) => state.todos);\n  const isLoading = useSelector((state: RootState) => state.isLoading);\n\n  const initData = () => {\n    dispatch(startLoading());\n\n    getAppData()\n      .then(todosFromServer => {\n        const action = initTodos(todosFromServer);\n\n        dispatch(action);\n      })\n      .finally(() => dispatch(finishLoading()));\n  };\n\n  const handleSortByTitle = () => {\n    dispatch(sortByTitle());\n  };\n\n  const handleSortByName = () => {\n    dispatch(sortByName());\n  };\n\n  const handleSortByStatus = () => {\n    dispatch(sortByStatus());\n  };\n\n  const handleDeleteTodo = (id: number) => {\n    dispatch(deleteTodo(id));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      <Buttons\n        isLoading={isLoading}\n        initData={initData}\n        sortByName={handleSortByName}\n        sortByStatus={handleSortByStatus}\n        sortByTitle={handleSortByTitle}\n      />\n      <TodoList\n        todos={todos}\n        deleteTodo={handleDeleteTodo}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}